---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Action test/validation workflow
name: 'Test GitHub Action üß™'

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions: {}

jobs:
  ### Test the GitHub Action in this Repository ###
  tests:
    name: 'Test local GitHub Action'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 10 # Increase this timeout value as needed
    steps:
      # Harden the runner used by this workflow
      # yamllint disable-line rule:line-length
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 'Get ticket from JSON lookup table'
        id: lookup
        uses: ./
        with:
          # yamllint disable-line rule:line-length
          json: '[{ "key": "dependabot[bot]", "value": "CIMAN-33" },{ "key": "bob", "value": "CIMAN-1" }]'
          key: 'dependabot[bot]'

      - name: "Validate local action: ${{ github.repository }}"
        shell: bash
        run: |
          # Local action validation
          if [[ "${{ steps.lookup.outputs.value }}" != 'CIMAN-33' ]]
          then
            echo 'Error: Did not receive expected CIMAN-33 value ‚ùå'; exit 1
          else
            echo 'Local action validated ‚úÖ'
          fi

      # yamllint disable-line rule:line-length
      - name: "Running local action: ${{ github.repository }} [Failure Test]"
        uses: ./
        id: failure
        continue-on-error: true
        with:
          # yamllint disable-line rule:line-length
          json: '[{ "key": "dependabot[bot]", "value": "CIMAN-33" },{ "key": "bob", "value": "CIMAN-1" }]'
          key: 'garbage'

      # Failure testing is also important
      - name: 'Error if step above did NOT fail'
        if: steps.failure.outcome == 'success'
        shell: bash
        run: |
          # Error if step above did NOT fail
          echo 'Error: previous test step did NOT fail ‚ùå'; exit 1
